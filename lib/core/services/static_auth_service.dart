import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:donor_dashboard/data/models/app_user_model.dart';

class StaticAuthService extends ChangeNotifier {
  static final StaticAuthService _instance = StaticAuthService._internal();
  factory StaticAuthService() => _instance;
  StaticAuthService._internal();

  AppUser? _currentUser;
  List<AppUser> _users = [];
  
  AppUser? get currentUser => _currentUser;
  bool get isLoggedIn => _currentUser != null;

  Future<void> init() async {
    debugPrint("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...");
    
    try {
      final String jsonString = await rootBundle.loadString('lib/data/static_users.json');
      final Map<String, dynamic> jsonData = jsonDecode(jsonString);
      
      _users = (jsonData['users'] as List)
          .map((userJson) => AppUser.fromJson(userJson))
          .toList();
      
      debugPrint("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${_users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: $e");
    }
    
    notifyListeners();
  }

  Future<String?> login({
    required String email,
    required String password,
  }) async {
    try {
      debugPrint("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $email");
      
      final user = _users.firstWhere(
        (user) => user.email == email && password == "123456",
        orElse: () => throw Exception("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
      );
      
      _currentUser = user;
      notifyListeners();
      
      debugPrint("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥: ${user.name}");
      return null;
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: $e");
      return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ test1@example.com - test5@example.com –∑ –ø–∞—Ä–æ–ª–µ–º 123456';
    }
  }

  Future<void> logout() async {
    debugPrint("üîç –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏...");
    _currentUser = null;
    notifyListeners();
    debugPrint("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤ –∑ —Å–∏—Å—Ç–µ–º–∏");
  }

  Future<bool> updateUserProfile(AppUser user) async {
    try {
      debugPrint("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: ${user.name}");
      
      final index = _users.indexWhere((u) => u.id == user.id);
      if (index != -1) {
        _users[index] = user;
        _currentUser = user;
        notifyListeners();
        
        debugPrint("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ: ${user.name}, –±–∞–ª—ñ–≤: ${user.totalPoints}");
        return true;
      }
      
      return false;
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: $e");
      return false;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  List<AppUser> getAllUsers() => List.from(_users);
}
