import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:donor_dashboard/data/models/app_user_model.dart';
import 'package:donor_dashboard/core/services/storage_service.dart';

class StaticAuthService extends ChangeNotifier {
  static final StaticAuthService _instance = StaticAuthService._internal();
  factory StaticAuthService() => _instance;
  StaticAuthService._internal();

  AppUser? _currentUser;
  List<AppUser> _users = [];
  final StorageService _storageService = StorageService();
  
  AppUser? get currentUser => _currentUser;
  bool get isLoggedIn => _currentUser != null;

  Future<void> init() async {
    debugPrint("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...");
    
    try {
      final String jsonString = await rootBundle.loadString('lib/data/static_users.json');
      final Map<String, dynamic> jsonData = jsonDecode(jsonString);
      
      _users = (jsonData['users'] as List)
          .map((userJson) => AppUser.fromJson(userJson))
          .toList();
      
      debugPrint("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${_users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: $e");
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    _currentUser = await _storageService.loadUser();
    if (_currentUser != null) {
      debugPrint("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${_currentUser!.name}");
    } else {
      debugPrint("‚ÑπÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
    
    notifyListeners();
  }

  Future<String?> login({
    required String email,
    required String password,
  }) async {
    try {
      debugPrint("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $email");
      
      final user = _users.firstWhere(
        (user) => user.email == email && user.password == password,
        orElse: () => throw Exception("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
      );
      
      _currentUser = user;
      await _storageService.saveUser(user);
      notifyListeners();
      
      debugPrint("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥: ${user.name}");
      return null;
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: $e");
      return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.';
    }
  }

  Future<String?> register({
    required String name,
    required String email,
    required String password,
  }) async {
    try {
      debugPrint("üîç –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $email");
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email
      if (_users.any((user) => user.email == email)) {
        return '–ê–∫–∞—É–Ω—Ç –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.';
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
      if (password.length < 6) {
        return '–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ —Å–ª–∞–±–∫–∏–π.';
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
      if (!email.contains('@') || !email.contains('.')) {
        return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email.';
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      final newUser = AppUser(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: name,
        email: email,
        password: password,
      );

      // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
      _users.add(newUser);
      _currentUser = newUser;
      await _storageService.saveUser(newUser);
      notifyListeners();
      
      debugPrint("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${newUser.name}");
      return null;
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: $e");
      return '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.';
    }
  }

  Future<void> logout() async {
    debugPrint("üîç –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏...");
    _currentUser = null;
    await _storageService.clearUser();
    notifyListeners();
    debugPrint("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤ –∑ —Å–∏—Å—Ç–µ–º–∏");
  }

  Future<bool> updateUserProfile(AppUser user) async {
    try {
      debugPrint("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: ${user.name}");
      
      final index = _users.indexWhere((u) => u.id == user.id);
      if (index != -1) {
        _users[index] = user;
        _currentUser = user;
        await _storageService.updateUser(user);
        notifyListeners();
        
        debugPrint("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ: ${user.name}, –±–∞–ª—ñ–≤: ${user.totalPoints}");
        return true;
      }
      
      return false;
    } catch (e) {
      debugPrint("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: $e");
      return false;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  List<AppUser> getAllUsers() => List.from(_users);
  
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  AppUser? getCurrentUser() => _currentUser;
}
